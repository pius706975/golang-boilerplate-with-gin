definitions:
  models.SignInRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  models.SignUpRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
info:
  contact: {}
paths:
  /api/auth/signin:
    post:
      consumes:
      - application/json
      description: Login with email and password
      parameters:
      - description: User data
        in: body
        name: userData
        required: true
        schema:
          $ref: '#/definitions/models.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Login as an authenticated user
      tags:
      - Authentication
  /api/auth/signup:
    post:
      consumes:
      - application/json
      description: Register a new user with email, username, and password
      parameters:
      - description: User data
        in: body
        name: userData
        required: true
        schema:
          $ref: '#/definitions/models.SignUpRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Register a new user
      tags:
      - Authentication
  /api/user/:
    get:
      consumes:
      - application/json
      description: Fetch all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
      summary: Get all users
      tags:
      - Users
  /api/user/{id}:
    get:
      consumes:
      - application/json
      description: Fetch the user details based on the ID provided
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Get user by ID
      tags:
      - Users
  /api/user/profile:
    get:
      consumes:
      - application/json
      description: Fetch the user profile based on the decoded ID from access token
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Get user by ID
      tags:
      - Users
swagger: "2.0"
